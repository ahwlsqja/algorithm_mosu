"""
백준 1181번 - 단어 정렬

문제 해결 과정:
1. 문제 분석
   - N개의 단어를 입력받음
   - 중복된 단어는 하나만 남기고 제거
   - 정렬 조건: 길이 짧은 순 → 길이 같으면 사전순

2. 접근 방법
   - 입력 → 중복 제거 → 정렬 → 출력 순서로 진행
   - set을 이용한 중복 제거
   - 다중 조건 정렬을 위한 튜플 key 사용

3. 알고리즘
   - 중복 제거: O(N) - set 자료구조 활용
   - 정렬: O(M log M) - M은 중복 제거 후 단어 개수
   - 전체: O(N + M log M)
"""

# 입력 처리
n = int(input())
words = []

# N개의 단어를 입력받아 리스트에 저장
# 시간복잡도: O(N), 공간복잡도: O(N)
for _ in range(n):
    word = input().strip()
    words.append(word)

# 1. 중복 제거
# set(): 중복된 단어들을 제거 (해시테이블 기반)
# 시간복잡도: O(N), 공간복잡도: O(M) - M은 고유한 단어 개수
words = list(set(words))

# 2. 다중 조건 정렬
# key=lambda x: (len(x), x)
# - len(x): 첫 번째 조건 - 단어 길이 (짧은 것부터)
# - x: 두 번째 조건 - 사전순 정렬 (길이가 같을 때)
# 시간복잡도: O(M log M * L) - L은 평균 단어 길이 (문자열 비교)
# 공간복잡도: O(M) - 정렬을 위한 추가 공간
words.sort(key=lambda x: (len(x), x))

# 3. 결과 출력
# 시간복잡도: O(M), 공간복잡도: O(1)
for word in words:
    print(word)

"""
전체 시간복잡도: O(N + M log M * L)
- N: 입력 단어 개수
- M: 중복 제거 후 단어 개수 (M ≤ N)
- L: 평균 단어 길이 (최대 50)

전체 공간복잡도: O(M)
- 중복 제거 후 단어들을 저장하는 공간

최적화 포인트:
1. set을 사용한 효율적인 중복 제거
2. 튜플 키를 이용한 간단한 다중 조건 정렬
3. 파이썬 내장 정렬 알고리즘 (Timsort) 활용
"""